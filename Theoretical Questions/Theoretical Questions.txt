0. What are the 4 OOP principle?
    A: Inheritance, abstraction, encapsulation, composition.
       Inheritance -> a class can be based on another class having access to the parent's field and methods (given the right access modifiers)
       Abstraction -> I think it refers to extracting only what's essential in a given context (i.e. while solving a problem)
       Encapsulation -> I don't really know a formal definition
		     -> it's about how a certain behaviour is not fully disclosed to the recipient of the action. It doesn't matter how something
			happens, it matters that it does. It's similar to a TV remote. We, as users of the remote, don't really know how the
			remote works, we only know what it does. Encapsulation goes had in hand with access modifiers. You give to the caller
			access to only what he's supposed to see, not more;
       Composition -> combining classes (or other data types) into more complex ones. It shows the idea of encapsulation as the final class is composed
		      of different classes which encapsulate behaviours.
		   -> there's the small distinction between composition and aggregation. Aggregation refers to composing an object from other independant
		      objects (which exist outside of the composition).
		      
Obs. Composition, while an important part of OOP ecosystem, it's not part of the of the 4 basic principles. Find the 4th and explain it here. If you can't, and I really doubt this, lets chat. Meanwhile, thank you for finding me yet another question. Check the newly added 33rd question.

Obs. Excellent explanation of the encapsulation (hat's off)

1. What is a class? What are objects?
    I've never actually thought about looking this up even though I use objects and classes all the time.
    
    A: I think classes are templates for creating objects, holding information about methods and properties . And I know that know that not all classes can be used for 
    creating objects (abstract and static classes). Objects are an instance of a class.
    
Nice!

2. What is a contructor?
    A: A special kind of method called when creating a new instance of a class. On the same note, static constructors are called only once before the first initialization
    of an object / referencing a static member of the class (static constructor is called before the instance constructor). Also constructors don't have a return type, but
    can have any acces modifier and a class can have any number of constrcutors (overloaded versions);
    
Nice!

3. What is constructor chaining?
    Hopefully I'm understanding the question correctly (I've never heard of chaining before, so it's all assumptions).

    A: It's the mechanism associated with calling another constructor (from the superclass or an overload) before the execution of the initial constructor.
        ex: public Constructor(some_params) : this/base(other_params) {} 
                -> the constructor calles with other_params executes first  
                -> "this" keyword implies a constructor from within the class
                -> "base" keyword implies a constructor from the superclass (current class inherits this one)

Nice!

4. Enumerate the most common access modifies in C# and explain their usage.
    A: private -> member is only accessible (can be called, assigned or read) from within the class
       protected -> member is only accessible from withing the class and classes that inherit it
       internal -> I'm not sure but I think the member is only accessible inside the assembly (the executable or the library)
       public -> member is accessible everywhere
       
Nice! You're not sure on internal. Please check and get back to me       

5. What is the difference between readonly and const?
    A: const -> defines a static field that can't be reassigned
       readonly -> defines an instance field that can only be assigned in a constructor or as part of field variable initialization
       static readonly -> same as readonly but can only be assigned inside a static constructor (I wasn't sure about this one and out of curiosity I fiddled with it)
    Bonus: I know const and readonly field are evaluated at different times. I'm not sure but probably consts are evaluated at compile-time and readonlt at runtime
    
 - Why do you think a static readonly can only be assigned inside a static constructor? How else can you assign a value to a static readonly?
- Why do you think readonly is evaluated at runtime? 

6. Explain the static keyword. (both in the context of a class and in the context of a method)
    A: A static class is a class that can't be used to initialize objects (no instance constructor). Its members are accessible (depending on access modifiers) from
    a reference to the class. All members of a static class have to be static. 
       Static methods (and also fields) are members common across all instances of a class. For example, a static value type field has the same
    value for all the instances of the class. Static members of a non-static class can be accessed  from an object instance of the class or from a reference to the class.
    
Nice!

7. What is the keyword virtual used for?
    A: It's used to signal that a method from a superclass is supposed to be overridden in the subclass, while also having a default implementation. Using the virtual 
    keyword makes the method behave polymorphically (the correct implementation is inferred). The new implementation in the subclass has the "override" keyword.
       A superclass' method can be overridden without the virtual keyword (the "new" keyword) but it won't behave polymorphically.

Very nice!

8. Explain the difference between overriding and overloading?
    A: Overloading refers to a method that shares the same signature (name and return type) with another one but requires different arguments. SO overload is a new imple-
    mentation of a method with a different set of arguments.
       Overriding refers to providing a new implementation for an already existing method, which hides the initial implementation.

Nice! How can we access the default implementation?

9.  A: ..\CodeSnippets\Polymorphism\program.cs

10. What is IDisposable?
    A: I didn't really come across IDisposable so much. I'll look into it after I finish this test.

11. Explain how the async/await mechanism works.
    Note: I looked into async/await a bit more while having a task on the project (some requests sent out by our API which took advantage of async while waiting
    for the response). On the same note, if you know any good articles discussing how to safelly use entity framework with multiple threads I would love to se them.
    Also, I'm not saying that I'm an expert in async/await, I don't find it the easiest concept.

    A: The async/await mechanism is used togheter with tasks aiming not to block the caller thread. A more thorough explanation can be found in the console app example, 
    I find it much easier to explain the mechanism on an example. (..\CodeSnippets\Async_Await\program.cs).

12.a) What are exceptions? 
        A: I don't actually know what exceptions are. Exceptions can be thrown to stop the execution of a program immediatly. And custom exceptions can be made by
        inheriting from the base class Exception.
   b) What are the main blocks for handling exceptions
        try {//code that might throw an exception here} -> always executed
        catch(Exception e) {} -> executed when an exception in try is thrown
        finally {} -> alway executed regardless if an exception is thrown or not
   c) ..\CodeSnippets\ExceptionHandling\program.cs

13. Explain the difference between a string and a StringBuilder.
    A: Strings are immutable while StringBuilders are mutable. Both represent sequences of characters but strings can't be modified.

14. Explain the difference between an abstract class and interfaces.
    A: An abstract class is a class that contains one or more abstract methods (without implementation) that can be provided with an implementation in classed that
    inherit the initial class. A class can't be instantiated if it has at least one abstract method.

       Interfaces are a special kind of abstract classes. Interfaces are composed only of methods without implementation (without the need to be declared as abstract). 
    Also, interface methods don't have access modifers (they are public) and unlike abstarct classes, a subclass can inherit any number of interfaces.

15. Are we allowed to use acces modifier when declaring an interface?
    A: No, all methods implemented inside a class from an interface have to be public.

16! What are interfaces allowed to expose?
    

17. Explain the keyword "this". Can "this" be used in a static method?
    A: The keyword "this" inside methods as a reference to the instance of the object used to call the method. It can't be used in static methods as static methods can be
    called without an instance of the class.

18. What is a property?
    A: A c# specific way of defining a field with getter and/or setter. 

19. What is an indexer?
    A: I'm not sure if this is the expected answer but in C# classes can be indexed similarly to arrays or lists
		Syntax: public T this[int index] { get; set; } -> defined as a property (get and set can be implemented normally)

20. What are partial classes? 
    A: Partial classes are classes that can have members defined elsewhere inside the namespace (I'm not sure if only withing the namespace though) besides the first
    definition.

21. Explain generics in C#. Write a simple example of a sample class using generics.
    A: Generics are used to define classes/members of a class without an exact type making them more reusable in a general case. Sample class: ..\CodeSnippets\Generics\program.cs

22. What is serialization? Enumerate some formats used for serialization.
    A: It's the operation used to convert variables stored in memory in another format that can be used to transport data. I've only come across json and xml as serialization
    formats a bit more in depth and I've heard of a binary format (not sure if this is what it's called) while searching ways of making deep copies.

23. What is a sealed class?
    A: It's a class that can't be inherited from. Moreover an overridden method can be sealed meaning that it's

24. How can you have a variable number of parameters in a function? Write an example.
    A: Using the params keyword and it has to be the last parameter of the function. Example: ..\Params\program.cs

25. Explain the difference between value types and reference types.
    A: Reference types don't hold the value of the variable, they hold a reference to that value in memory (strings, objects, arrays or lists...). As such changing the value of the
    reference to something else (null for example) doesn't affect the value in memory but changes the reference. Value types hold the actual value from memory (ints, enums, structs...)

26. What is an enum?
    A: I'm not actually sure but I've used them before. Enums are a value type that I've used as a group of named constants.

27. What is the difference between out and ref keywords?
    A: Both keyword are used when declaring function parameters.
	a) Ref keyword -> normally function arguments are passed as a copy (either to a value or a reference). By using the ref keyword, a reference to the variable is passed as an argument to
	the function
	b) Out keyword -> argumetns marked with out are an alternative to return. Values of the out parameters have to set inside the method and then can be used by the caller function.

28. What is an anonymous method? What is an anonymous type?
    A: Anonymous functions -> can be used instead of delegates providing a simpler way to write inline functions
	Syntax: (_params) => { //function logic here [if not void] return...}     -> An. functions don't have a name
       Anonymous type are a way of encapsulating data in a single variable without the need to define the type explicitely before. I think they are readonly. And also
    anonymous types don't have names.
	Syntax: new {prop1 = ....; prop2 = ...., ... }

29. What is a delegate? What are lambda expressions?
    A: Delegates are references to a function. And lambda expressions are a more succint way of writing anonymous functions. I don't really know if the compiler treats expressions different
    than delegates but most of the time I use them in the same scenarios.

30. What is the yield keyword used for?
    A: "Yield return" is "syntactic sugar" for a method returning an IEnumerable. Instead of returning the actual IEnumerable<T>, the method yield returns a variable of type T. Iterating with a
    foreach loop gives all the values yield returned by the method (in order). Not sure how to better explain. See the code snippet at: ..\CodeSnippets\Yield\Program.cs
31. What is the enum keyword?
    A:

32. What is the difference between a struct and a class? Can we have methods in structs?
    A: Classes are reference types while structs are value types. For example, one difference cause by structs being value types is: (assume Point is a struct that has a public field int x;)
       ex: Point p1 = new Point();
	   Point p2 = p1;
	   p2.x = 5;
	   -> the value of p1.x remains the unchanged as p2 is a copy of p1. They don't reference the same struct, they are independant. And this example is true for value types and immutable re-
	      ference types (such as strings). If a field inside the struct is a reference to a mutable type, the structs are no longer fully independant.
	     
33. Explain OOP Composition vs Aggregation.
	
			   
